# ca contains the certificate authority configuration.
ca:
  # name is new public key infrastructure (PKI) names.
  name: Step Certificates
  # address is the HTTP listener address of step-certificates.
  address: :9000
  # dns is the comma separated dns names to use. Leave it empty to use the format:
  # {include "step-certificates.fullname" .}.{ .Release.Namespace}.svc.cluster.local,127.0.0.1
  dns:
  # url is the http url where step-certificates will listen at. Leave it empty to use the format
  # https://{{ include "step-certificates.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local
  url:
  # password is the password used to encrypt the keys. Leave it empty to generate a random one.
  password:
  # provisioner contains the step-certificates provisioner configuration.
  provisioner:
    # name is the new provisioner name.
    name: admin
    # password is the password used to encrypt the provisioner private key.
    password:
  # db contains the step-certificate database configuration.
  db:
    # enabled defines if the database is enabled.
    enabled: true
    # persistent defines if a Persistent Volume Claim is used, if false and emptyDir will be used.
    persistent: true
    # storeageClass is Persistent Volume Storage Class
    # If defined, storageClassName: <storageClass>.
    # If set to "-", storageClassName: "", which disables dynamic provisioning.
    # If undefined or set to null, no storageClassName spec is set, choosing the
    # default provisioner (gp2 on AWS, standard on GKE, AWS & OpenStack).
    storageClass:
    ## Persistent Volume existing claim name
    ## Requires ca.db.persistent: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim: ""
    # accessModes defines the Persistent Volume Access Mode.
    accessModes:
    - ReadWriteOnce
    # size is the Persistent Volume size.
    size: 10Gi
  # Whether to enable ssh support for step-ca
  ssh:
    enabled: false
  # kms type to utilize
  kms:
    type: ""
  # additional environment variables to set in the step-certificates container
  env: []
  bootstrap:
    # Add script snippets here to be executed after the step ca init has been run
    postInitHook: ""
  # Use existing secret for ca-password
  existingSecrets:
    enabled: false
  init:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      runAsUser: 1000
      capabilities:
        drop: ["ALL"]
      runAsNonRoot: true
      # seccompProfile:
      #   type: RuntimeDefault
  containerSecurityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    runAsUser: 1000
    # runAsRoot: 0 runs the ca as root instead of the step user. This is required in
    # some storage provisioners.
    # runAsUser: 0
    capabilities:
      drop: ["ALL"]
      add: ["NET_BIND_SERVICE"]
    runAsNonRoot: true
    # seccompProfile:
    #   type: RuntimeDefault

